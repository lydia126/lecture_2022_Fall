var.1 = c(0,1,2,3)
# Assignment using leftward operator.
var.2 <- c("learn","R")
# Assignment using rightward operator.
c(TRUE,1) -> var.3
cat ("var.1 is ", var.1 ,"\n")
cat ("var.2 is ", var.2 ,"\n")
cat ("var.3 is ", var.3 ,"\n")
var_x <- "Hello"
cat("The class of var_x is ",class(var_x),"\n")
var_x <- 34.5
cat("  Now the class of var_x is ",class(var_x),"\n")
var_x <- 27L
cat("   Next the class of var_x becomes ",class(var_x),"\n")
#8) Finding Variables
print(ls())
# List the variables starting with the pattern "var".
print(ls(pattern = "var"))
print(ls(all.name = TRUE))
#9) Deleting Variables
rm(var.3)
print(var.3)
rm(list = ls()) # 모든 변수 삭제
print(ls())
x <- 15
if(x > 10) {
y <- x*5
} else {
y <- x/5
}
print(y)
X <- c(1,2,4,5,6)
ifelse(X%%2==0, "even", "odd")
x <-50
if (x>=90){
grade = 'A'
} else if (x>=80){
grade='B'
} else if (x>=70){
grade='c'
} else {
grade='D'
print(grade)
if (x>=90){
grade = 'A'
} else if (x>=80){
grade='B'
} else if (x>=70){
grade='c'
} else {
grade='D'
print(grade)
}
x <-50
if (x>=90){
grade = 'A'
} else if (x>=80){
grade='B'
} else if (x>=70){
grade='c'
} else {
grade='D'
print(grade)
}
for (x1 in c(50, 70, 100, 95, 85)) {
if (x1>=90) {
grade = 'A'
} else if (x1>=80){
grade='B'
} else if (x1>=70){
grade='c'
} else {
grade='D'
}
print(grade)
}
## if-else if
x <-50
x <-50
if (x>=90){
grade = 'A'
} else if (x>=80){
grade='B'
} else if (x>=70){
grade='c'
} else {
grade='D'
}
print(grade)
x <-50
if (x>=90){
grade = 'A'
} else if (x>=80){
grade='B'
} else if (x>=70){
grade='c'
} else {
grade='D'
}
}
print(grade)
x <-50
if (x>=90){
grade = 'A'
} else if (x>=80){
grade='B'
} else if (x>=70){
grade='c'
} else {
grade='D'}
print(grade)
for (x1 in c(50, 70, 100, 95, 85)) {
if (x1>=90) {
grade = 'A'
} else if (x1>=80){
grade='B'
} else if (x1>=70){
grade='c'
} else {
grade='D'
}
print(grade)
}
client<-"public"
net.price<-100
if(client=='private'){
tot.price <- net.price * 1.12
} else if(client=='public'){
tot.price <- net.price * 1.06
} else {
tot.price <- net.price
}
print(tot.price)
for (i in 1:7) {
print(i^2)
}
x <-1:7
Looplees <- x^2        # R은 loop 사용없이 반복적 계산 용이
Looplees
Storage <- numeric(5)
for (i in 1:5){
Storage[i] <- i^2
}
Storage
mean(Storage)
x <- c(-3,6,2,5,9)
storage1 <- numeric(5)
storage1
for (i in 1:5) {
storage1[i]<-(x[i])^2
}
storage1
Temp <- c(-4, 5, 10, -6, -40, 30)
if(Temp > 0) {
print("warm")
} else {
print("not so warm")
}
for(Temp in c(-4, 5, 10, -6, -40, 30)){
if(Temp > 0) {
print("warm")
} else {
print("not so warm")
}
}
for (i in 1:3){
for (j in 1:2){
print (i+j)
}  #2
} #1
i<-0
while(i<=9) {
i<-i+1
if(i%%2!=0) {
next       #odd이면 프린터하지 않고 다음 숫자로 감
}
print(i)
}
Age<-c(56,34,67,33,25,28)
Weight<-c(78,67,56,44,56,89)
Height<-c(165, 171,167,167,166,181)
BMI_df<-data.frame(Age,Weight,Height)
BMI_df
# row wise sum up of dataframe using apply function in R
apply(BMI_df,1,sum)
# column wise sum up of dataframe using apply function in R
apply(BMI_df,2,sum)
# column wise mean of dataframe using apply function in R
apply(BMI_df,2,mean)
## lapply function in R
# takes list, vector or Data frame  as input and returns only list as output
lapply(BMI_df, function(BMI_df) BMI_df/2)
lapply(BMI_df, mean)
## sapply functionin
# takes list, vector or Data frame  as input and returns only vector and matrix as output.
result<-sapply(BMI_df, function(BMI_df) BMI_df/2)
result
sapply(BMI_df, mean)
random <- c("This", "is", "random",  "vector")
sapply(random,nchar)
## tapply function in R
# apply a function to subsets of a vector
attach(iris)
# mean sepal length by species
tapply(iris$Sepal.Length, Species, mean)
#3) 연산
## NA의 처리
sum(c(1,2,3, NA))
sum(c(1,2,3,NA), na.rm=TRUE)
(x<-data.frame(a=c(1,2,3), b=c("a",NA,"c"), c=c("a","b",NA)))
#na.fail(x)   #NA가 포함되어 있으므로 실패
na.omit(x)   #NA가 포함된 행은 제외
na.exclude(x)   #NA가 포함된 행은 제외
na.pass(x)   #NA의 여부에 상관없이 통과
fibo <- function(n){
if(n==1 || n==2) {
return(1)
}
return(fibo(n-1)+fibo(n-2))
}
fibo(1)
fibo(9)
OConner <- function (vel, dep)
{
ka<-(3.93 * (vel^0.5))/(dep^1.5)
return(data.frame(vel, dep, ka))
}
U <- seq(0.2, 1.0, 0.2)
OConner(vel=U,dep=1)
f <- function(...){
args<-list(...)
for (a in args) {
print(a)
}
}
f('I','love', 'r' )
n <- 1
f <- function() {
print (n)
}
f()
n<-1
f <- function() {
n<-100
print (n)
}
f()
f <- function() {
a <- 1
g <- function() {
a <- 2
print(a)
}
g()
print(a)     #내부 블록 g함수에서 a를 2로 지정하려 했으나, 외부블록 f함수의 a=1로 유지
}
f()
f()
g()
f <- function() {
a <- 1
g <- function() {
a <<- 2
b <<- 2
print(a)
print(b)
}
g()
print(a)     #내부 블록 g함수에서 <<-로 지정한 변수는 전역에 적용됨
print(b)
}
f()
## 벡터 연산, 배열 할당
mean(x<-c(1,2,3))   # 값 할당은 <- 사용 할 것
## 벡터 연산, 배열 할당
mean(z<-c(1,2,3))   # 값 할당은 <- 사용 할 것
## 벡터 연산, 배열 할당
mean(z=c(1,2,3))   # 값 할당은 <- 사용 할 것
## 벡터 연산, 배열 할당
mean(x=c(1,2,3))   # 값 할당은 <- 사용 할 것
x <-50
if (x>=90){
grade = 'A'
} else if (x>=80){
grade='B'
} else if (x>=70){
grade='c'
} else {
grade='D'}
print(grade)
x <-50
if (x>=90){
grade = 'A'
} else if (x>=80){
grade='B'
} else if (x>=70){
grade='c'
} else {
grade='D'
print(grade)
}
i<-0
while(i<=9) {
i<-i+1
if(i%%2!=0) {
next       #odd이면 프린터하지 않고 다음 숫자로 감
}
print(i)
}
i<-1
repeat {
print(i)
if(i>=10) {
break       #i가 10보다 크거가 같으면 출력 중단
}
i<-i+1
}
sum(c(1,2,3, NA))
sum(c(1,2,3,NA), na.rm=TRUE)
(x<-data.frame(a=c(1,2,3), b=c("a",NA,"c"), c=c("a","b",NA)))
#na.fail(x)   #NA가 포함되어 있
na.fail(x)   #NA가 포함되어 있으므로 실패
ls
ls()
rm(z)
ls()
ls()
## 벡터 연산, 배열 할당
mean(x<-c(1,2,3))   # 값 할당은 <- 사용 할 것
x
mean(x=c(1,2,3))
x
mean(z=c(1,2,3))
z
mean(y=c(4,5,6))
mean(y<-c(4,5,6))
y
## 벡터 연산, 배열 할당
mean(x<-c(1,2,3))   # 값 할당은 <- 사용 할 것
x
mean(x=c(4,5,6))
x
rm(all)
rm()
ls
ls()
mean(z=c(4,5,6))
## 벡터 연산, 배열 할당
mean(x<-c(1,2,3))   # 값 할당은 <- 사용 할 것
x
mean(x=c(4,5,6))
x
apple <- c('red','green',"yellow")  #벡터 생성은 C() 사용
class(apple)
print(apple)
# Get the class of the vector.
print(class(apple))
mean(x<-c(1,2,3))   # 값 할당은 <- 사용 할 것
x                   # 값 할당과 동시 연산 가능
mean(x=c(4,5,6))    # 연산은 되지만 값 할당 않됨
x
y<-c(1,3,4)
names(y)<-c("kim","seo","park")
y
matrix(1:9, nrow = 3, dimnames = list(c("r1","r2","r3"),c("c1","c2","c3")))
#2) Lists
# A list is an R-object which can contain many different types of elements inside it
# like vectors, functions and even another list inside it
# Create a list.
list1 <- list(c(2,5,3),21.3,sin)
# Print the list.
print(list1)
# Create a matrix.
M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M)
M1 = matrix(1:9, nrow=3, dimnames=list(c("r1","r2","r3"),c("c1","c2","c3")))
M1
M1 = matrix(1:9, nrow=3, dimnames=list(c("r1","r2","r3"),c("c1","c2","c3")), byrow = TRUE)
M1
M1*2
M1%*%M1
M1%*%t(M1)
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
A <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
det(A)  # determinant
inv(A)  # inverse matrix
#3) Matrices
# A matrix is a two-dimensional rectangular data set.
# It can be created using a vector input to the matrix function
library(matlib)
inv(A)  # inverse matrix
A%*%inv(A)
a <- array(c('green','yellow'),dim = c(3,3,2))
print(a)
x<-array(1:12, dim = c(2,2,3))
x
x[1,1,1]
x[,,3]
#5) Factors
# Factors are the r-objects which are created using a vector.
# It stores the vector along with the distinct values of the elements in the vector as labels.
# The labels are always character irrespective of whether it is numeric or character or Boolean etc. in the input vector.
# Create a vector.
apple_colors <- c('green','green','yellow','red','red','red','green')
# Create a factor object.
factor_apple <- factor(apple_colors)
# Print the factor.
print(factor_apple)
print(nlevels(factor_apple))
BMI <- 	data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
print(BMI)
sub_BMI=BMI[c(2,3),c(1,2,3),drop=F]
print(sub_BMI)
ls()
M
rm(M)
M
ls()
fibo <- function(n){
if(n==1 || n==2) {
return(1)
}
return(fibo(n-1)+fibo(n-2))
}
ls()
fibo(10)
fibo(100)
fibo(20)
Age<-c(56,34,67,33,25,28)
Weight<-c(78,67,56,44,56,89)
Height<-c(165, 171,167,167,166,181)
BMI_df<-data.frame(Age,Weight,Height)
BMI_df
# row wise sum up of dataframe using apply function in R
apply(BMI_df,1,sum)
# column wise sum up of dataframe using apply function in R
apply(BMI_df,2,sum)
# column wise mean of dataframe using apply function in R
apply(BMI_df,2,mean)
## lapply function in R
# takes list, vector or Data frame  as input and returns only list as output
lapply(BMI_df, function(BMI_df) BMI_df/2)
lapply(BMI_df, mean)
result<-sapply(BMI_df, function(BMI_df) BMI_df/2)
result
random <- c("This", "is", "random",  "vector")
sapply(random,nchar)
## tapply function in R
# apply a function to subsets of a vector
attach(iris)
# mean sepal length by species
tapply(iris$Sepal.Length, Species, mean)
OConner <- function (vel, dep)
{
ka<-(3.93 * (vel^0.5))/(dep^1.5)
return(data.frame(vel, dep, ka))
}
OConner(2,0.5)
U <- seq(0.2, 1.0, 0.2)
U
OConner(vel=U,dep=1)
f <- function(...){
args<-list(...)
for (a in args) {
print(a)
}
}
f('I','love', 'r' )
n <- 1
f <- function() {
print (n)
}
f()
n<-1
f <- function() {
n<-100
print (n)
}
f()
f <- function() {
a <- 1
g <- function() {
a <- 2
print(a)
}
g()
print(a)     #내부 블록 g함수에서 a를 2로 지정하려 했으나, 외부블록 f함수의 a=1로 유지
}
f()
f <- function() {
a <- 1
g <- function() {
a <<- 2
b <<- 2
print(a)
print(b)
}
g()
print(a)     #내부 블록 g함수에서 <<-로 지정한 변수는 전역에 적용됨
print(b)
}
f()
